name: 🚨 Doomsday Backup Shield
on:
  push:
    branches: [ main, master, develop ]
  schedule:
    # Daily backup at 3 AM UTC
    - cron: '0 3 * * *'
  workflow_dispatch:
    inputs:
      backup_name:
        description: 'Custom backup name'
        required: false
        default: 'manual-backup'

jobs:
  nuclear-backup:
    runs-on: ubuntu-latest
    name: 🔒 Nuclear Backup Protocol
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for complete backup
    
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: 💾 Install Dependencies
      run: |
        npm ci
        pip install -r requirements.txt || echo "No requirements.txt found"
    
    - name: 🏗️ Build Project (if applicable)
      run: |
        npm run build || echo "No build script found"
    
    - name: 📊 Generate Backup Metadata
      run: |
        mkdir -p .backup-metadata
        echo "{
          \"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\",
          \"commit\": \"$GITHUB_SHA\",
          \"branch\": \"$GITHUB_REF_NAME\",
          \"event\": \"$GITHUB_EVENT_NAME\",
          \"actor\": \"$GITHUB_ACTOR\",
          \"run_id\": \"$GITHUB_RUN_ID\",
          \"run_number\": \"$GITHUB_RUN_NUMBER\"
        }" > .backup-metadata/github-backup.json
        
        # Add dependency snapshots
        npm list --json > .backup-metadata/npm-dependencies.json || echo "{}" > .backup-metadata/npm-dependencies.json
        pip freeze > .backup-metadata/python-dependencies.txt || touch .backup-metadata/python-dependencies.txt
    
    - name: 🗜️ Create Complete Backup Archive
      run: |
        BACKUP_NAME="${{ github.event.inputs.backup_name || 'auto-backup' }}-$(date +%Y%m%d-%H%M%S)"
        echo "BACKUP_NAME=$BACKUP_NAME" >> $GITHUB_ENV
        
        # Create comprehensive backup
        tar -czf "$BACKUP_NAME.tar.gz" \
          --exclude=node_modules \
          --exclude=.git \
          --exclude='*.log' \
          --exclude=dist \
          --exclude=build \
          --exclude=.next \
          .
        
        echo "📦 Backup created: $BACKUP_NAME.tar.gz"
        ls -lh "$BACKUP_NAME.tar.gz"
    
    - name: ☁️ Upload to GitHub Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.BACKUP_NAME }}
        path: ${{ env.BACKUP_NAME }}.tar.gz
        retention-days: 90
    
    - name: 📋 Create Recovery Instructions
      run: |
        cat > RECOVERY-INSTRUCTIONS.md << 'EOF'
        # 🚨 EMERGENCY RECOVERY INSTRUCTIONS
        
        ## Quick Recovery (30 seconds)
        ```bash
        # Download and extract this backup
        gh run download ${{ github.run_id }} --name ${{ env.BACKUP_NAME }}
        tar -xzf ${{ env.BACKUP_NAME }}.tar.gz
        
        # Restore dependencies
        npm install
        pip install -r requirements.txt
        
        # Verify everything works
        npm run dev
        ```
        
        ## Backup Details
        - **Created**: $(date -u)
        - **Commit**: ${{ github.sha }}
        - **Branch**: ${{ github.ref_name }}
        - **Trigger**: ${{ github.event_name }}
        - **Size**: $(du -h ${{ env.BACKUP_NAME }}.tar.gz | cut -f1)
        
        ## What's Included
        - ✅ All source code
        - ✅ Configuration files
        - ✅ Package manifests
        - ✅ Recovery scripts
        - ✅ Documentation
        - ❌ node_modules (will be restored)
        - ❌ Build artifacts (will be rebuilt)
        
        ## Emergency Contacts
        - Repository: ${{ github.repository }}
        - Runner: ${{ runner.os }}
        - Workflow: ${{ github.workflow }}
        EOF
    
    - name: 📄 Upload Recovery Instructions
      uses: actions/upload-artifact@v3
      with:
        name: recovery-instructions-${{ env.BACKUP_NAME }}
        path: RECOVERY-INSTRUCTIONS.md
    
    - name: 🔔 Slack Notification (Optional)
      if: always()
      run: |
        if [ "${{ secrets.SLACK_WEBHOOK }}" != "" ]; then
          curl -X POST -H 'Content-type: application/json' \
            --data '{
              "text": "🚨 Backup completed: ${{ env.BACKUP_NAME }}\nStatus: ${{ job.status }}\nCommit: ${{ github.sha }}\nBranch: ${{ github.ref_name }}"
            }' \
            ${{ secrets.SLACK_WEBHOOK }}
        fi
  
  disaster-recovery-test:
    runs-on: ubuntu-latest
    needs: nuclear-backup
    name: 🧪 Test Recovery Process
    
    steps:
    - name: 📥 Download Backup
      uses: actions/download-artifact@v3
      with:
        name: ${{ needs.nuclear-backup.outputs.backup_name || 'auto-backup' }}
    
    - name: 🔄 Test Restore Process
      run: |
        # Extract backup
        tar -xzf *.tar.gz
        
        # Setup environment
        curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash
        export NVM_DIR="$HOME/.nvm"
        [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
        nvm install 18
        nvm use 18
        
        # Test restore
        npm install
        
        # Basic smoke test
        if [ -f "package.json" ]; then
          echo "✅ Package.json found"
          npm list --depth=0 || echo "⚠️ Some dependencies may be missing"
        fi
        
        if [ -f "next.config.js" ]; then
          echo "✅ Next.js project detected"
          npm run build || echo "⚠️ Build test failed"
        fi
        
        echo "🎉 Recovery test completed!"
